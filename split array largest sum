class Solution {
public:
int countpartition(vector<int>&nums, int maxsum){
    int n = nums.size();
    int partitions = 1;
    long long subarray = 0;
    for(int i = 0 ;i<n; i++){
        if( subarray + nums[i] <= maxsum){
            subarray += nums[i];
                            
        }
        else{
            partitions++;
            subarray = nums[i];
        }
    }
    return partitions;
}
    int splitArray(vector<int>& nums, int k) {
        int low = *max_element(nums.begin(), nums.end());
        int high = accumulate(nums.begin() , nums.end() , 0);
        while(low<= high){
            int mid = (low+high)/2;
            int partitions = countpartition(nums, mid);
            if(partitions>k){
                low = mid+1;
            }
            else {
                high = mid-1;
            }
        }
        return low;
    }
};
